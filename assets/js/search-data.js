// get the ninja-keys element
const ninja = document.querySelector('ninja-keys');

// add the home and posts menu items
ninja.data = [{
    id: "nav-about",
    title: "About",
    section: "Navigation",
    handler: () => {
      window.location.href = "/";
    },
  },{id: "nav-blog",
          title: "Blog",
          description: "",
          section: "Navigation",
          handler: () => {
            window.location.href = "/blog/";
          },
        },{id: "nav-publications",
          title: "Publications",
          description: "Publications by categories in reversed chronological order. Generated by jekyll-scholar.",
          section: "Navigation",
          handler: () => {
            window.location.href = "/publications/";
          },
        },{id: "nav-repositories",
          title: "Repositories",
          description: "Selected GitHub repositories, mostly for courses I teach.",
          section: "Navigation",
          handler: () => {
            window.location.href = "/repositories/";
          },
        },{id: "nav-teaching",
          title: "Teaching",
          description: "Current and recent courses taught.",
          section: "Navigation",
          handler: () => {
            window.location.href = "/teaching/";
          },
        },{id: "post-unicode-string-length-can-mean-different-things-in-different-languages",
      
        title: 'Unicode string length can mean different things in different languages <svg width="1.2rem" height="1.2rem" top=".5rem" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><path d="M17 13.5v6H5v-12h6m3-3h6v6m0-6-9 9" class="icon_svg-stroke" stroke="#999" stroke-width="1.5" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>',
      
      description: "I was working on a text processing example across several different programming languages, including C++, Java, Rust, and Scala, and noticed some discrepancies in the results.It turned out that these are due to Unicode string length meaning different things in different languages:In Java, Scala, etc., the length() method returns the number of abstract, high-level characters (glyphs) from a human reader&#39;s point of view.By contrast, in C++, Go, and Rust, the equivalent functions and methods return a result based on the number of bytes required to store those characters.jshell&amp;gt; &quot;résumé&quot;.length()$1 ==&amp;gt; 6❯ evcxrWelcome to evcxr. For help, type :help&amp;gt;&amp;gt; &quot;résumé&quot;.len()8&amp;gt;&amp;gt; &quot;résumé&quot;.chars().count()6len([]rune(&quot;résumé&quot;)) // returns 6Apparently it&#39;s a bit more complicated in C++.",
      section: "Posts",
      handler: () => {
        
          window.open("https://dev.to/klaeufer/unicode-string-length-can-mean-different-things-in-different-languages-3e6j", "_blank");
        
      },
    },{id: "post-running-the-editcp-dmr-codeplug-editor-binary-on-a-mac",
      
        title: 'Running the Editcp DMR codeplug editor binary on a Mac <svg width="1.2rem" height="1.2rem" top=".5rem" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><path d="M17 13.5v6H5v-12h6m3-3h6v6m0-6-9 9" class="icon_svg-stroke" stroke="#999" stroke-width="1.5" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>',
      
      description: "I&#39;ve been looking for a painless way to run Dale Farnworth&#39;s excellent Editcp DMR codeplug editor on my Mac, mostly because it&#39;s more convenient than additionally pulling out my rarely used Linux laptop.I vaguely recall trying a few years ago to build it natively on the Mac and this being very complex and ultimately failing. So today I tried a different approach: running Editcp in one of my existing VMware Ubuntu Linux VMs.In short, I&#39;m delighted to report that this works for me once I installed XQuartz on the Mac and libqt5gui5 on Linux!My environment:MacOS SonomaVMware FusionUbuntu 22.04 LTS 64-bit VMSteps for installing and running:brew install xquartzssh -X ubuntuvm.localsudo apt install libqt5gui5/opt/bin/editcpchoose to connect the USB device to Linux",
      section: "Posts",
      handler: () => {
        
          window.open("https://dev.to/klaeufer/running-the-editcp-dmr-codeplug-editor-on-a-mac-2gl9", "_blank");
        
      },
    },{id: "post-jacoco-doesn-39-t-directly-support-vacuously-true-100-branch-coverage",
      
        title: 'JaCoCo doesn&#39;t directly support vacuously true 100% branch coverage <svg width="1.2rem" height="1.2rem" top=".5rem" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><path d="M17 13.5v6H5v-12h6m3-3h6v6m0-6-9 9" class="icon_svg-stroke" stroke="#999" stroke-width="1.5" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>',
      
      description: "BackgroundI&#39;m an educator and share most of my thoughts just with my students. Once in a while, I have something to share that might help a wider audience and decided to try that here.      Measuring code coverage with JaCoCoCode coverage is a metric that indicates how thoroughly we&#39;re testing. JaCoCo is a mature, actively developed code coverage tool for Java and other JVM-based languages. For each type of coverage, such as lines, branches, etc., it keeps track of covered and missed items and generates a report with the corresponding coverage percentages.      Minimal example in JavaHere is a minimal SUT (system under test) in Java:public class HelloWorld {  public String getMessage() {    return &quot;hello world&quot;;  }}Here is a JUnit assertion for it:assertEquals(&quot;hello world&quot;, new HelloWorld().getMessage());And this is the resulting coverage report:[info] Test run started (JUnit Jupiter)[info] Test hw.TestHelloWorld#getMessage() started[info] Test run finished: 0 failed, 0 ignored, 1 total, 0.136s[info] Passed: Total 1, Failed 0, Errors 0, Passed 1[info][info] ------- Jacoco Coverage Report -------[info][info] Lines: 100% (&amp;gt;= required 90.0%) covered, 0 of 2 missed, OK[info] Instructions: 100% (&amp;gt;= required 80.0%) covered, 0 of 5 missed, OK[info] Branches: 0% (&amp;lt; required 100.0%) covered, 0 of 0 missed, NOK[info] Methods: 100% (&amp;gt;= required 100.0%) covered, 0 of 2 missed, OK[info] Complexity: 100% (&amp;gt;= required 100.0%) covered, 0 of 2 missed, OK[info] Class: 100% (&amp;gt;= required 100.0%) covered, 0 of 1 missed, OK[info][info] Check /Users/laufer/Work/teaching/cs335/hello-java-sbt/target/scala-2.12/jacoco/report for detailed report[info][error] java.lang.RuntimeException: Required coverage is not met...According to JaCoCo, the required coverage threshold is not met because zero branches were covered.      How does JaCoCo calculate this?In JaCoCo&#39;s CounterImpl class, the coverage percentages are calculated as follows:public double getCoveredRatio() {  return (double) covered / (missed + covered);}So, when there is nothing to be covered or missed, the ratio is Double.NaN (&quot;not a number&quot;), representing the division of 0 by 0 in this case.      DiscussionIf there are no branches to be covered, shouldn&#39;t coverage be automatically (vacuously) 100%? From a discrete math perspective, yes:If there is no work to be done, then the work is already 100% done.This corresponds to the understanding in mathematical logic that a universally quantified predicate over an empty set (of any element type) is always true (even if the predicate itself is always false):scala&amp;gt; Set.empty[String].forall(x =&amp;gt; false)val res0: Boolean = trueIt&#39;s easy to implement this behavior by adding a case distinction:public double getCoveredRatio() {  if (missed == 0) {    return 1;  }  return (double) covered / (missed + covered);}After working on this for a bit, I finally found the pertinent closed issue from 2015. The closing comment suggests that they are favoring a continuous math perspective based on the ratio calculation shown above, which returns NaN even if there are no items missed. They closed comments on this issue, and I don&#39;t think they&#39;d consider reopening it.Arguably, this is a leaky abstraction that is inconsistent with the definition of code coverage from a discrete math perspective.      Why is this even relevant?Doesn&#39;t all real-world code include branches, such as conditionals or switches? Well, not necessarily. Arguably, the fewer the better from a readability and maintenance point of view. Event-based systems, such as this Android stopwatch, might not need explicit branching in their control flow when using structural techniques instead, such as attaching listeners to different event sources and applying the State pattern to implement the underlying state-based behavior.      ConclusionThis is obviously a rather minor issue but regularly throws off my students. The path of least resistance seems to be changing the JaCoCo branch coverage threshold in your build configuration: If your SUT happens to have no branches, set the branch coverage threshold to 0, otherwise set it to the desired percentage.jacocoReportSettings := JacocoReportSettings()  .withThresholds(    JacocoThresholds(      ...      branch = 0,      ...",
      section: "Posts",
      handler: () => {
        
          window.open("https://dev.to/klaeufer/jacoco-doesnt-support-vacuously-true-100-code-coverage-1caa", "_blank");
        
      },
    },{id: "post-computer-science-assistant-professor-algorithms-languages-formal-konstantin-läufer",
      
        title: 'Computer Science, Assistant Professor (Algorithms, Languages, Formal… | Konstantin Läufer <svg width="1.2rem" height="1.2rem" top=".5rem" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><path d="M17 13.5v6H5v-12h6m3-3h6v6m0-6-9 9" class="icon_svg-stroke" stroke="#999" stroke-width="1.5" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>',
      
      description: "#LoyolaChicago #ComputerScience invites applications for a full-time, tenure-track Assistant Professor position beginning Fall 2024 in the areas of #Algorithms, #ProgrammingLanguages, #FormalMethods, #TheoryOfComputation, and #SoftwareEngineering. Please apply at https://lnkd.in/g8xHXZQE. Review of applications will begin immediately and continue until the position is filled. Applications submitted before January 2nd, 2024, will receive full consideration.",
      section: "Posts",
      handler: () => {
        
          window.open("https://www.linkedin.com/posts/laufer_computer-science-assistant-professor-algorithms-activity-7128915068733313024-qM8L", "_blank");
        
      },
    },{
        id: 'social-acm',
        title: 'ACM DL',
        section: 'Socials',
        handler: () => {
          window.open("https://dl.acm.org/profile/81100009927/", "_blank");
        },
      },{
        id: 'social-dblp',
        title: 'DBLP',
        section: 'Socials',
        handler: () => {
          window.open("https://dblp.uni-trier.de/pid/l/KLaufer.html", "_blank");
        },
      },{
        id: 'social-github',
        title: 'GitHub',
        section: 'Socials',
        handler: () => {
          window.open("https://github.com/klaeufer", "_blank");
        },
      },{
        id: 'social-gitlab',
        title: 'GitLab',
        section: 'Socials',
        handler: () => {
          window.open("https://gitlab.com/klaeufer", "_blank");
        },
      },{
        id: 'social-ieee',
        title: 'IEEE Xplore',
        section: 'Socials',
        handler: () => {
          window.open("https://ieeexplore.ieee.org/author/37550735300/", "_blank");
        },
      },{
        id: 'social-instagram',
        title: 'Instagram',
        section: 'Socials',
        handler: () => {
          window.open("https://instagram.com/klaeufer", "_blank");
        },
      },{
        id: 'social-linkedin',
        title: 'LinkedIn',
        section: 'Socials',
        handler: () => {
          window.open("https://www.linkedin.com/in/laufer", "_blank");
        },
      },{
        id: 'social-orcid',
        title: 'ORCID',
        section: 'Socials',
        handler: () => {
          window.open("https://orcid.org/0000-0002-7548-0876", "_blank");
        },
      },{
        id: 'social-researchgate',
        title: 'ResearchGate',
        section: 'Socials',
        handler: () => {
          window.open("https://www.researchgate.net/profile/Konstantin-Laeufer/", "_blank");
        },
      },{
        id: 'social-scholar',
        title: 'Google Scholar',
        section: 'Socials',
        handler: () => {
          window.open("https://scholar.google.com/citations?user=Rs0f_nMAAAAJ", "_blank");
        },
      },{
        id: 'social-stackoverflow',
        title: 'Stackoverflow',
        section: 'Socials',
        handler: () => {
          window.open("https://stackoverflow.com/users/4778618", "_blank");
        },
      },{
        id: 'social-work',
        title: 'Work',
        section: 'Socials',
        handler: () => {
          window.open("https://scholars.luc.edu/en/persons/konstantin-l%C3%A4ufer", "_blank");
        },
      },{
        id: 'social-x',
        title: 'X',
        section: 'Socials',
        handler: () => {
          window.open("https://twitter.com/klaeufer", "_blank");
        },
      },{
        id: 'social-youtube',
        title: 'YouTube',
        section: 'Socials',
        handler: () => {
          window.open("https://youtube.com/@klaeufer", "_blank");
        },
      },{
        id: 'social-zotero',
        title: 'Zotero',
        section: 'Socials',
        handler: () => {
          window.open("https://www.zotero.org/laufer", "_blank");
        },
      },{
      id: 'light-theme',
      title: 'Change theme to light',
      description: 'Change the theme of the site to Light',
      section: 'Theme',
      handler: () => {
        setThemeSetting("light");
      },
    },
    {
      id: 'dark-theme',
      title: 'Change theme to dark',
      description: 'Change the theme of the site to Dark',
      section: 'Theme',
      handler: () => {
        setThemeSetting("dark");
      },
    },
    {
      id: 'system-theme',
      title: 'Use system default theme',
      description: 'Change the theme of the site to System Default',
      section: 'Theme',
      handler: () => {
        setThemeSetting("system");
      },
    },];
