@incollection{Kaylor_CloudBookRestFS_2011,
 abbr = {CRC},
 author = {Kaylor, Joseph P. and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;2=myself},
 bibtex_show = {1},
 booktitle = {Cloud computing: {Methodology}, system, and applications},
 editor = {Wang, Lizhe and Ranjan, Rajiv and Chen, Jinjun and Benatallah, Boualem},
 isbn = {978-1-4398-5641-3},
 publisher = {CRC Press},
 title = {{RestFS}: {The} filesystem as a connector abstraction for flexible resource and service composition},
 url = {https://ecommons.luc.edu/cs_facpubs/45/},
 year = {2011}
}

@incollection{Laufer_CDERBook_2018,
 abbr = {TCPP},
 abstract = {In this chapter, we explore various parallel and distributed computing topics from a user-centric software engineering perspective. Specifically, in the context of mobile application development, we study the basic building blocks of interactive applications in the form of events, timers, and asynchronous activities, along with related software modeling, architecture, and design topics.},
 arxiv = {1705.02899},
 author = {Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {Topics in parallel and distributed computing},
 doi = {https://doi.org/10.1007/978-3-319-93109-8_9},
 editor = {Prasad, Sushil K. and Gupta, Anshul and Rosenberg, Arnold and Sussman, Alan and Weems, Charles},
 isbn = {978-3-319-93109-8},
 publisher = {Springer},
 selected = {true},
 title = {Managing concurrency in mobile user interfaces with examples in android},
 url = {https://arxiv.org/abs/1705.02899},
 year = {2018}
}
@inproceedings{Bone_EIT_2008,
 abbr = {EIT},
 abstract = {Processing markup in object-oriented languages often requires the programmer to focus on the objects generating the markup rather than the more pertinent domain objects. The BetterXML framework aims to improve this situation by allowing the programmer to develop a domain-specific object model as usual and later bind this model to preexisting or newly generated markup. To this end, the framework provides two types of object trees, XElement and NaturalXML, for representing XML documents. XElement goes beyond DOM-like automatic parsing of XML by supporting the custom mapping of elements to domain objects; NaturalXML allows the mapping of existing domain objects to XML elements using class metadata. Both types of object trees can be inflated and deflated by means of a common intermediate representation in the form of an event stream. Finally, the framework includes the XML Intermediate Representation (XIR), a lossless record-oriented representation of XML documents for efficient streaming and other types of data exchange.},
 author = {Bone, Matt and Nabicht, Peter F. and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;3=myself},
 bibtex_show = {1},
 booktitle = {{IEEE} international conference on electro/information technology ({EIT} 2008)},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 pages = {488--493},
 shorttitle = {Taming {XML}},
 title = {Taming {XML}: {Objects} first, then markup},
 url = {https://ecommons.luc.edu/cs_facpubs/39},
 year = {2008}
}

@inproceedings{Colby_OOPSLAEDU_1998,
 abbr = {OOPSLA},
 address = {Vancouver, Canada},
 author = {Colby, Christopher and Jagadeesan, Radha and Läufer, Konstantin and Sekharan, Chandra},
 author+an = {3=myself},
 bibtex_show = {1},
 booktitle = {Proc. {OOPSLA} 1998 educators' symposium},
 month = {October},
 title = {Interaction, concurrency, and {OOP} in the curriculum: a sophomore course},
 year = {1998}
}

@inproceedings{DBLP:conf/coots/ColbyJJLP98,
 abbr = {COOTS},
 author = {Colby, Christopher and Jagadeesan, Lalita Jategaonkar and Jagadeesan, Radha and Läufer, Konstantin and Puchol, Carlos},
 author+an = {4=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {4th {USENIX} conference on object-oriented technologies and systems ({COOTS}), april 27-30, 1998, eldorado hotel, santa fe, new mexico, {USA}},
 pages = {131--149},
 publisher = {USENIX},
 timestamp = {Tue, 02 Feb 2021 00:00:00 +0100},
 title = {Objects and concurrency in triveni: {A} telecommunication case study in java},
 url = {http://www.usenix.org/publications/library/proceedings/coots98/colby.html},
 year = {1998}
}

@inproceedings{DBLP:conf/coots/Laufer95,
 abbr = {COOTS},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Proceedings of the {USENIX} conference on object-oriented technologies, {COOTS}'95, monterey, california, {USA}, june 26-29, 1995},
 editor = {Russo, Vincent F.},
 publisher = {USENIX},
 timestamp = {Tue, 02 Feb 2021 00:00:00 +0100},
 title = {A framework for higher-order functions in {C}++},
 url = {http://www.usenix.org/publications/library/proceedings/coots95/laufer.html},
 year = {1995}
}

@inproceedings{DBLP:conf/cp/GuptaJJJL00,
 abbr = {CP},
 author = {Gupta, Vineet and Jagadeesan, Lalita Jategaonkar and Jagadeesan, Radha and Jiang, Xiaowei and Läufer, Konstantin},
 author+an = {4=graduate;5=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Principles and practice of constraint programming - {CP} 2000, 6th international conference, singapore, september 18-21, 2000, proceedings},
 doi = {10.1007/3-540-45349-0_16},
 editor = {Dechter, Rina},
 pages = {202--217},
 publisher = {Springer},
 series = {Lecture notes in computer science},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {A constraint-based framework for prototyping distributed virtual applications},
 url = {https://doi.org/10.1007/3-540-45349-0_16},
 volume = {1894},
 year = {2000}
}

@inproceedings{DBLP:conf/ic/ZhangLG03,
 abbr = {IC},
 author = {Zhang, Jia and Läufer, Konstantin and Gong, Zhiguo},
 author+an = {2=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Proceedings of the international conference on internet computing, {IC} '03, las vegas, nevada, {USA}, june 23-26, 2003, volume 2},
 editor = {Arabnia, Hamid R. and Mun, Youngsong},
 pages = {684--687},
 publisher = {CSREA Press},
 timestamp = {Wed, 23 Oct 2019 01:00:00 +0200},
 title = {Mockup supporting web requirements engineering},
 year = {2003}
}

@inproceedings{DBLP:conf/iccl/ColbyJJLP98,
 abbr = {ICCL},
 author = {Colby, Christopher and Jagadeesan, Lalita Jategaonkar and Jagadeesan, Radha and Läufer, Konstantin and Puchol, Carlos},
 author+an = {4=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Proceedings of the 1998 international conference on computer languages, {ICCL} 1998, chicago, {IL}, {USA}, may 14-16, 1998},
 doi = {10.1109/ICCL.1998.674157},
 pages = {58--67},
 publisher = {IEEE Computer Society},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {Design and implementation of triveni: {A} process-algebraic {API} for threads + events},
 url = {https://doi.org/10.1109/ICCL.1998.674157},
 year = {1998}
}

@inproceedings{DBLP:conf/icsoft/2011-1,
 abbr = {ICSOFT},
 author = {Läufer, Konstantin and Thiruvathukal, George K. and Dennis, David B.},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {{ICSOFT} 2011 - proceedings of the 6th international conference on software and data technologies, volume 1, seville, spain, 18-21 july, 2011},
 isbn = {978-989-8425-76-8},
 publisher = {SciTePress},
 timestamp = {Wed, 28 Sep 2011 18:26:31 +0200},
 title = {Initial experience in moving key academic department functions to social networking sites},
 url = {http://ecommons.luc.edu/cs_facpubs/36/},
 year = {2011}
}

@inproceedings{DBLP:conf/icsoft/2011-2,
 abbr = {ICSOFT},
 author = {Kaylor, Joseph P. and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;2=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {{ICSOFT} 2011 - proceedings of the 6th international conference on software and data technologies, volume 1, seville, spain, 18-21 july, 2011},
 isbn = {978-989-8425-76-8},
 publisher = {SciTePress},
 timestamp = {Wed, 28 Sep 2011 18:26:31 +0200},
 title = {{REST} on routers? {Preliminary} lessons for language designers, framework architects, and app developers},
 url = {https://ecommons.luc.edu/cs_facpubs/35/},
 year = {2011}
}

@inproceedings{DBLP:conf/icws/GutmanRKSL09,
 abbr = {ICWS},
 author = {Gutman, Moshe and Radhakrishnan, Sridhar and Kim, Changwook and Sekharan, Chandra N. and Läufer, Konstantin},
 author+an = {5=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {{IEEE} international conference on web services, {ICWS} 2009, los angeles, {CA}, {USA}, 6-10 july 2009},
 doi = {10.1109/ICWS.2009.135},
 pages = {1035--1036},
 publisher = {IEEE Computer Society},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {{GroupSpeak}: {High}-level language extension for workflow capability},
 url = {https://doi.org/10.1109/ICWS.2009.135},
 year = {2009}
}

@inproceedings{DBLP:conf/phoenix/LauferO91,
 abbr = {PHOENIX},
 author = {Läufer, Konstantin and Odersky, Martin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Declarative programming, sasbachwalden 1991, {PHOENIX} seminar and workshop on declarative programming, sasbachwalden, black forest, germany, 18-22 november 1991},
 doi = {10.1007/978-1-4471-3794-8_10},
 editor = {Darlington, John and Dietrich, Roland},
 pages = {148--162},
 publisher = {Springer},
 series = {Workshops in computing},
 timestamp = {Fri, 21 Jun 2019 13:08:59 +0200},
 title = {Type classes are signatures of abstract types},
 url = {https://doi.org/10.1007/978-1-4471-3794-8_10},
 year = {1991}
}

@inproceedings{DBLP:conf/popl/OderskyL96,
 abbr = {POPL},
 author = {Odersky, Martin and Läufer, Konstantin},
 author+an = {2=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Conference record of {POPL}'96: {The} 23rd {ACM} {SIGPLAN}-{SIGACT} symposium on principles of programming languages, papers presented at the symposium, st. {Petersburg} beach, florida, {USA}, january 21-24, 1996},
 doi = {10.1145/237721.237729},
 editor = {Boehm, Hans-Juergen and Jr., Guy L. Steele},
 pages = {54--67},
 publisher = {ACM Press},
 timestamp = {Tue, 06 Nov 2018 00:00:00 +0100},
 title = {Putting type annotations to work},
 url = {https://doi.org/10.1145/237721.237729},
 year = {1996}
}

@inproceedings{DBLP:conf/seke/HerrLSTW08,
 abbr = {SEKE},
 author = {Herr, Sebastian and Läufer, Konstantin and Shafaee, John and Thiruvathukal, George K. and Wirtz, Guido},
 author+an = {1=graduate;2=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {Proceedings of the twentieth international conference on software engineering \& knowledge engineering ({SEKE}'2008), san francisco, {CA}, {USA}, july 1-3, 2008},
 pages = {339--344},
 publisher = {Knowledge Systems Institute Graduate School},
 timestamp = {Thu, 12 Mar 2020 11:30:50 +0100},
 title = {Combining {SOA} and {BPM} technologies for cross-system process automation},
 year = {2008}
}

@inproceedings{DBLP:conf/sigsoft/GodefroidJJL00,
 abbr = {FSE},
 author = {Godefroid, Patrice and Jagadeesan, Lalita Jategaonkar and Jagadeesan, Radha and Läufer, Konstantin},
 author+an = {4=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 booktitle = {{ACM} {SIGSOFT} symposium on foundations of software engineering, an diego, california, {USA}, november 6-10, 2000, proceedings},
 doi = {10.1145/355045.355051},
 editor = {Knight, John C. and Rosenblum, David S.},
 pages = {40--49},
 publisher = {ACM},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {Automated systematic testing for constraint-based interactive services},
 url = {https://doi.org/10.1145/355045.355051},
 year = {2000}
}

@inproceedings{HengleinLaufer_PANEL_1991,
 abbr = {CLEI},
 address = {Universidad Simón Bolívar, Caracas, Venezuela},
 author = {Henglein, Fritz and Läufer, Konstantin},
 author+an = {2=myself},
 bibtex_show = {1},
 booktitle = {Proc. {XVII} latin american informatics conference ({PANEL} '91)},
 pages = {333--352},
 title = {Programming with structures, functions, and objects},
 year = {1991}
}

@inproceedings{Honig_SIES_2015,
 abbr = {SIES},
 abstract = {Academic courses focused on individual microcomputers or client/server applications are no longer sufficient for students to develop knowledge in embedded systems. Current and near-term industrial systems employ multiple interacting components and new network and security approaches; hence, academic preparation requires teaching students to develop realistic projects comparable to these real-world products. However, the complexity, breadth, and technical variations of these real-world products are difficult to reproduce in the classroom. This paper outlines preliminary work on a framework architecture suitable for academic teaching of modern embedded systems including the Internet of Things. It defines four layers, two of which are at the edges of the network, and not adequately covered in academia. For each layer of the architecture, specific technology and suitable devices are identified. Desired academic outcomes for courses using projects based on the architecture are identified. Feedback and comparison is sought on how effective student course and research activities based on the framework will be to real-world embedded systems developers.},
 author = {Honig, William and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {2=myself},
 bibtex_show = {1},
 booktitle = {10th {IEEE} international symposium on industrial embedded systems ({SIES})},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 pages = {1--4},
 title = {A framework architecture for student learning in distributed embedded systems},
 url = {https://ecommons.luc.edu/cs_facpubs/257/},
 year = {2015}
}

@inproceedings{Kaylor_EIT_2010,
 abbr = {EIT},
 abstract = {We present a novel form of intra-volume directory layering with hierarchical, inheritance-like namespace unification. While each layer of an OLFS volume constitutes a subvolume that can be mounted separately in a fan-in configuration, the entire hierarchy is always accessible (online) and fully navigable through any mounted layer. OLFS uses a relational database to store its layering metadata and either a relational database or any (virtual) host file system as its backing store, along with metadata and block caching for improved performance. Because OLFS runs as a virtual file system in user-space, its capabilities are available to all existing software without modification or special privileges. We have developed a reference implementation of OLFS for FUSE based on MySQL and XFS, and conducted performance benchmarking against XFS by itself. We explore several applications of OLFS, such as enhanced server synchronization, transactional file operations, and versioning.},
 author = {Kaylor, Joseph P. and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;2=myself},
 bibtex_show = {1},
 booktitle = {{IEEE} international conference on electro/information technology ({EIT} 2010)},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 pages = {1--9},
 shorttitle = {Online layered file system ({OLFS})},
 title = {Online {Layered} {File} {System} ({OLFS}): {A} layered and versioned filesystem and performance analysis},
 url = {https://ecommons.luc.edu/cs_facpubs/40},
 year = {2010}
}

@inproceedings{Kaylor_EIT_2012,
 abbr = {EIT},
 author = {Kaylor, Joseph P. and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;2=myself},
 bibtex_show = {1},
 booktitle = {International {Conference} on {Electro} {Information} {Technology} 2012},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 title = {Simplifying domain modeling and memory management in user-mode filesystems with the {NOFS} framework},
 url = {https://ecommons.luc.edu/cs_facpubs/62/},
 year = {2012}
}

@inproceedings{Kaylor_WSREST_2011,
 abbr = {WWW},
 abstract = {We have designed and implemented RestFS, a software framework that provides a uniform, configurable connector layer for mapping remote web-based resources to local filesystem-based resources, recognizing the similarity between these two types of resources. Such mappings enable programmatic access to a resource, as well as composition of two or more resources, through the local operating system's standard filesystem application programming interface (API), scriptable file-based command-line utilities, and inter-process communication (IPC) mechanisms. The framework supports automatic and manual authentication. We include several examples intended to show the utility and practicality of our framework.},
 address = {ACM, 2 Penn Plaza, Suite 701, New York, NY 10121-0701, USA},
 author = {Kaylor, Joseph P. and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;2=myself},
 bibtex_show = {1},
 booktitle = {Second international workshop / restful design ({WS}-{REST} '11)},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 isbn = {978-1-4503-0623-2},
 title = {{RestFS}: {Resources} are filesystems, too},
 url = {https://ecommons.luc.edu/cs_facpubs/15/},
 year = {2011}
}

@inproceedings{Laufer_EduHPC_2022,
 abbr = {TCPP},
 abstract = {Abstract—oneAPI is a major initiative by Intel aimed at making it easier to program heterogeneous architectures used in high-performance computing using a unified application programming interface (API). While raising the abstraction level via a unified API represents a promising step for the current generation of students and practitioners to embrace highperformance computing, we argue that a curriculum of welldeveloped software engineering methods and well-crafted exemplars will be necessary to ensure interest by this audience and those who teach them. We aim to bridge the gap by developing a curriculum—codenamed UnoAPI—that takes a more holistic approach by looking beyond language and framework to include the broader development ecosystem, similar to the experience found in popular HPC languages such as Python. We hope to make parallel programming a more attractive option by making it look more like general application development in modern languages being used by most students and educators today. Our curriculum emanates from the perspective of well-crafted exemplars from the foundations of computer systems—given that most HPC architectures of interest begin from the systems tradition—with an integrated treatment of essential principles of distributed systems, programming languages, and software engineering. We argue that a curriculum should cover the essence of these topics to attract students to HPC and enable them to confidently solve computational problems using oneAPI. By the time of this submission, we have shared our materials with a small group of undergraduate sophomores, and their responses have been encouraging in terms of self-reported comprehension and ability to reproduce the compilation and execution of exemplars on their personal systems. We plan a follow-up study with a larger cohort by incorporating some of our materials in our existing course on High-Performance Computing.},
 address = {Dallas, TX, USA},
 author = {Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {Proceedings of the workshop on education for high-performance computing ({EduHPC}-22)},
 month = {November},
 selected = {true},
 title = {{UnoAPI}: {Balancing} performance, portability, and productivity ({P3}) in {HPC} education},
 url = {https://ecommons.luc.edu/cs_facpubs/314/},
 year = {2022}
}

@inproceedings{Laufer_EduPar_2011,
 abbr = {TCPP},
 author = {Läufer, Konstantin and Sekharan, Chandra and Thiruvathukal, George K.},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {1st {NSF}/{IEEE}-{CS} {TCPP} workshop on parallel and distributed computing education ({EduPar}), anchorage, alaska},
 month = {May},
 title = {{PDC} modules for every level: a comprehensive model for incorporating {PDC} topics into the existing undergraduate curriculum},
 url = {https://tcpp.cs.gsu.edu/curriculum/?q=node/16950},
 year = {2011}
}

@inproceedings{Laufer_EduPar_2013,
 abbr = {TCPP},
 author = {Läufer, Konstantin and Sekharan, Chandra and Thiruvathukal, George K. and Kaylor, Joseph P.},
 author+an = {1=myself;4=graduate},
 bibtex_show = {1},
 booktitle = {3rd {NSF}/{IEEE}-{CS} {TCPP} workshop on parallel and distributed computing education ({EduPar}), boston, massachusetts},
 month = {May},
 title = {Spring-11: {Introducing} {PDC} topics into {CS1}/2 and a mobile- and cloud-based intermediate software design course},
 url = {https://tcpp.cs.gsu.edu/curriculum/?q=EduPar-13_Proceedings},
 year = {2013}
}

@inproceedings{Laufer_FIE_2024,
 abbr = {FIE},
 abstract = {Background: In this paper, we present our initial efforts to integrate formal methods, with a focus on model-checking specifications written in Temporal Logic of Actions (TLA+), into computer science education, targeting undergraduate juniors/seniors and graduate students. Formal methods can play a key role in ensuring correct behavior of safety-critical systems, yet remain underutilized in educational and industry contexts. Aims: We aim to (1) qualitatively assess the state of formal methods in computer science programs, (2) construct level-appropriate examples that could be included midway into one's undergraduate studies, (3) demonstrate how to address successive "failures" through progressively stringent safety and liveness requirements, and (4) establish an ongoing framework for assessing interest and relevance among students. Methods: After starting with a refresher on mathematical logic, students specify the rules of simple puzzles in TLA+ and use its included model checker (known as TLC) to find a solution. We gradually escalate to more complex, dynamic, event-driven systems, such as the control logic of a microwave oven, where students will study safety and liveness requirements. We subsequently discuss explicit concurrency, along with thread safety and deadlock avoidance, by modeling bounded counters and buffers. Results: Our initial findings suggest that through careful curricular design and choice of examples and tools, it is possible to inspire and cultivate a new generation of software engineers proficient in formal methods. Conclusions: Our initial efforts suggest that 84\% of our students had a positive experience in our formal methods course. Future plans include a longitudinal analysis within our own institution and proposals to partner with other institutions to explore the effectiveness of our open-source and open-access modules.},
 address = {Washington, DC},
 arxiv = {2407.21152},
 author = {Läufer, Konstantin and Mertin, Gunda and Thiruvathukal, George K.},
 author+an = {1=myself;2=graduate},
 bibtex_show = {1},
 booktitle = {Proc.2024 {IEEE} frontiers in education conference ({FIE})},
 month = {October},
 note = {arXiv: 2407.21152 [cs.SE]},
 title = {{WIP}: {An} engaging undergraduate intro to model checking in software engineering using {TLA}+},
 url = {https://arxiv.org/abs/2407.21152},
 year = {2024}
}

@inproceedings{Laufer_PANEL_1994,
 abbr = {CLEI},
 address = {Mexico},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {Proc. {Latin} american informatics conf. ({PANEL})},
 month = {September},
 publisher = {ITESM-CEM},
 title = {Combining type classes and existential types},
 year = {1994}
}

@inproceedings{Laufer_Scala_2019,
 abbr = {Scala},
 abstract = {In testing stateful abstractions, it is often necessary to record interactions, such as method invocations, and express assertions over these interactions. Following the Test Spy design pattern, we can reify such interactions programmatically through additional mutable state. Alternatively, a mocking framework, such as Mockito, can automatically generate test spies that allow us to record the interactions and express our expectations in a declarative domain-specific language. According to our study of the test code for Scala's Iterator trait, the latter approach can lead to a significant reduction of test code complexity in terms of metrics such as code size (in some cases over 70\% smaller), cyclomatic complexity, and amount of additional mutable state required. In this tools paper, we argue that the resulting test code is not only more maintainable, readable, and intentional, but also a better stylistic match for the Scala community than manually implemented, explicitly stateful test spies.},
 address = {New York, NY, USA},
 arxiv = {1808.09630},
 author = {Läufer, Konstantin and O'Sullivan, John and Thiruvathukal, George K.},
 author+an = {1=myself;2=graduate},
 bibtex_show = {1},
 booktitle = {Proceedings of the tenth {ACM} {SIGPLAN} symposium on scala},
 doi = {10.1145/3337932.3338814},
 isbn = {978-1-4503-6824-7},
 keywords = {automated unit testing, iterator design pattern, mock-based testing, prefix sum, spy-based testing, stream processing, test code complexity, test code metrics},
 month = {July},
 note = {Number of pages: 5
Place: London, United Kingdom},
 pages = {17--21},
 publisher = {Association for Computing Machinery},
 selected = {true},
 series = {Scala '19},
 title = {Tests as maintainable assets via auto-generated spies: a case study involving the scala collections library's iterator trait},
 url = {https://doi.org/10.1145/3337932.3338814},
 year = {2019}
}

@inproceedings{LauferOdersky_ML_1992,
 abbr = {ML},
 author = {Läufer, Konstantin and Odersky, Martin},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {Proc. {ACM} {SIGPLAN} workshop on {ML} and its applications},
 month = {June},
 title = {An extension of {ML} with first-class abstract types},
 year = {1992}
}

@inproceedings{LauferOdersky_Reflection_1993,
 abbr = {OOPSLA},
 author = {Läufer, Konstantin and Odersky, Martin},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {Proc. {OOPSLA} workshop on reflection and metalevel architectures},
 month = {October},
 publisher = {ACM},
 title = {Self-interpretation and reflection in a statically typed language},
 year = {1993}
}

@inproceedings{Mehta_IPDPS_2007,
 abbr = {IPDPS},
 author = {Mehta, Neeraj and Kanitkar, Yogesh and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=graduate;2=graduate;3=myself},
 bibtex_show = {1},
 booktitle = {2007 {IEEE} international parallel and distributed processing symposium},
 doi = {10.1109/IPDPS.2007.370423},
 pages = {1--8},
 title = {A model-driven approach to job/task composition in cluster computing},
 year = {2007}
}

@inproceedings{Synovic_ASE_2022,
 abbr = {ASE},
 abstract = {Software metrics capture information about software development products and processes. These metrics support decision-making, e.g., in team management or dependency selection. However, existing metrics tools measure only a snapshot of a software project. Little attention has been given to enabling engineers to reason about metric trends over time—longitudinal metrics that give insight about process, not just product. In this work, we present PRIME (PRocess Internal MEtrics), a tool for computing and visualizing process metrics. The currently-supported metrics include productivity, issue density, issue spoilage, and bus factor. We illustrate the value of longitudinal data and conclude with a research agenda.},
 address = {New York, NY, USA},
 author = {Synovic, Nicholas and Hyatt, Matt and Sethi, Rohan and Thota, Sohini and {Shilpika} and Miller, Allan J. and Jiang, Wenxin and Amobi, Emmanuel S. and Pinderski, Austin and Läufer, Konstantin and Hayward, Nicholas J. and Klingensmith, Neil and Davis, James C. and Thiruvathukal, George K.},
 author+an = {1=undergrad;2=undergrad;3=undergrad;4=undergrad;6=graduate;8=undergrad;9=undergrad;10=myself},
 bibtex_show = {1},
 booktitle = {Proceedings of the 37th {IEEE}/{ACM} international conference on automated software engineering},
 month = {October},
 note = {Place: Ann Arbor, Michigan, USA
tex.address+duplicate-1: Oakland Center, MI, USA},
 selected = {true},
 series = {Ase '22},
 title = {Snapshot metrics are not enough: {Analyzing} software repositories with longitudinal metrics (tool demonstration)},
 url = {http://ecommons.luc.edu/cs_facpubs/296/},
 year = {2022}
}

@inproceedings{Thiruvathukal_WSSSPE_2015,
 abbr = {WSSSPE},
 author = {Thiruvathukal, George K. and {Shilpika} and Hayward, Nicholas and Aguiar, Saulo and Läufer, Konstantin},
 author+an = {2=graduate;4=graduate;5=myself},
 bibtex_show = {1},
 booktitle = {Proc. {Workshop} on sustainable software for science: {Practice} and experiences ({WSSSPE})},
 title = {Towards sustainable digital humanities software},
 url = {https://ecommons.luc.edu/cs_facpubs/257/},
 year = {2015}
}
@article{DBLP:journals/cj/LauferBR00,
 abbr = {CJ},
 author = {Läufer, Konstantin and Baumgartner, Gerald and Russo, Vincent F.},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1093/comjnl/43.6.469},
 journal = {Computer Journal},
 number = {6},
 pages = {469--481},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {Safe structural conformance for java},
 url = {https://doi.org/10.1093/comjnl/43.6.469},
 volume = {43},
 year = {2000}
}

@article{DBLP:journals/entcs/ColbyJJLP98,
 abbr = {ENTCS},
 author = {Colby, Christopher and Jategaonkar, Lalita and Jagadeesan, Radha and Läufer, Konstantin and Puchol, Carlos},
 author+an = {4=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1016/S1571-0661(05)80233-6},
 journal = {Electronic Notes in Theoretical Computer Science},
 pages = {107--133},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {The semantics of triveni: {A} process-algebraic {API} for threads + events},
 url = {https://doi.org/10.1016/S1571-0661(05)80233-6},
 volume = {14},
 year = {1998}
}

@article{DBLP:journals/ijst/BallCDJJLMR00,
 abbr = {IJST},
 author = {Ball, Thomas and Colby, Christopher and Danielsen, Peter J. and Jagadeesan, Lalita Jategaonkar and Jagadeesan, Radha and Läufer, Konstantin and Mataga, Peter and Rehor, Kenneth},
 author+an = {6=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1023/A:1009645414233},
 journal = {International Journal of Speech Technology},
 number = {2},
 pages = {93--108},
 timestamp = {Mon, 08 Jun 2020 01:00:00 +0200},
 title = {Sisl: {Several} interfaces, single logic},
 url = {https://doi.org/10.1023/A:1009645414233},
 volume = {3},
 year = {2000}
}

@article{DBLP:journals/jfp/Laufer96,
 abbr = {JFP},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1017/S0956796800001817},
 journal = {Journal of Functional Programming},
 number = {3},
 pages = {485--517},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {Type classes with existential types},
 url = {https://doi.org/10.1017/S0956796800001817},
 volume = {6},
 year = {1996}
}

@article{DBLP:journals/sigsoft/JagadeesanLG00,
 abbr = {SIGSOFT},
 author = {Jagadeesan, Radha and Läufer, Konstantin and Gupta, Vineet},
 author+an = {2=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1145/340855.340962},
 journal = {ACM SIGSOFT Softw. Eng. Notes},
 number = {1},
 pages = {59},
 timestamp = {Thu, 17 Sep 2020 01:00:00 +0200},
 title = {The {Triveni} project},
 url = {https://doi.org/10.1145/340855.340962},
 volume = {25},
 year = {2000}
}

@article{DBLP:journals/toplas/LauferO94,
 abbr = {TOPLAS},
 author = {Läufer, Konstantin and Odersky, Martin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1145/186025.186031},
 journal = {ACM Trans. Program. Lang. Syst.},
 number = {5},
 pages = {1411--1430},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {Polymorphic type inference and abstract data types},
 url = {https://doi.org/10.1145/186025.186031},
 volume = {16},
 year = {1994}
}

@article{doi:10.4137/EBO.S32757,
 abbr = {EVB},
 abstract = {As sequencing technologies continue to drop in price and increase in throughput, new challenges emerge for the management and accessibility of genomic sequence data. We have developed a pipeline for facilitating the storage, retrieval, and subsequent analysis of molecular data, integrating both sequence and metadata. Taking a polyglot approach involving multiple languages, libraries, and persistence mechanisms, sequence data can be aggregated from publicly available and local repositories. Data are exposed in the form of a RESTful web service, formatted for easy querying, and retrieved for downstream analyses. As a proof of concept, we have developed a resource for annotated HIV-1 sequences. Phylogenetic analyses were conducted for ¿6,000 HIV-1 sequences revealing spatial and temporal factors influence the evolution of the individual genes uniquely. Nevertheless, signatures of origin can be extrapolated even despite increased globalization. The approach developed here can easily be customized for any species of interest.},
 author = {Reisman, Steven and Hatzopoulos, Thomas and Läufer, Konstantin and Thiruvathukal, George K. and Putonti, Catherine},
 author+an = {1=graduate;2=undergrad;3=myself},
 bibtex_show = {1},
 doi = {10.4137/EBO.S32757},
 eprint = {https://doi.org/10.4137/EBO.S32757},
 journal = {Evolutionary Bioinformatics},
 pages = {EBO.S32757},
 title = {A polyglot approach to bioinformatics data integration: a phylogenetic analysis of {HIV}-1},
 url = {https://doi.org/10.4137/EBO.S32757},
 volume = {12},
 year = {2016}
}
@article{DBLP:journals/cse/Laufer05,
 abbr = {CiSE},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1109/MCSE.2005.85},
 journal = {Computing in Science \& Engineering},
 number = {5},
 pages = {80--88},
 timestamp = {Thu, 12 Mar 2020 00:00:00 +0100},
 title = {A hike through post-{EJB} {J2EE} {Web} application architecture},
 url = {https://doi.org/10.1109/MCSE.2005.85},
 volume = {7},
 year = {2005}
}

@article{DBLP:journals/cse/Laufer06,
 abbr = {CiSE},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1109/MCSE.2006.20},
 journal = {Computing in Science \& Engineering},
 number = {2},
 pages = {79--87},
 timestamp = {Thu, 12 Mar 2020 00:00:00 +0100},
 title = {A hike through post-{EJB} {J2EE} web application architecture, part {II}},
 url = {https://doi.org/10.1109/MCSE.2006.20},
 volume = {8},
 year = {2006}
}

@article{DBLP:journals/cse/Laufer08,
 abbr = {CiSE},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 doi = {10.1109/MCSE.2008.67},
 journal = {Computing in Science \& Engineering},
 number = {3},
 pages = {76--83},
 timestamp = {Thu, 14 Oct 2021 01:00:00 +0200},
 title = {A stroll through domain-driven development with naked objects},
 url = {https://doi.org/10.1109/MCSE.2008.67},
 volume = {10},
 year = {2008}
}

@article{Hinsen_CISE_VCS_2009,
 abbr = {CiSE},
 author = {Hinsen, Konrad and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {2=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {6},
 pages = {84--91},
 shorttitle = {Essential {Tools}},
 title = {Essential {Tools}: {Version} {Control} {Systems}},
 url = {https://ecommons.luc.edu/cs_facpubs/27/},
 volume = {11},
 year = {2009}
}

@article{Laufer_CISE_Cloud_2011,
 abbr = {CiSE},
 author = {Läufer, Konstantin and Thiruvathukal, George K. and Dennis, David B.},
 author+an = {1=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {5},
 pages = {84--89},
 shorttitle = {Moving academic department functions to social networks and clouds},
 title = {Moving {Academic} {Department} {Functions} to {Social} {Networks} and {Clouds}: {Initial} {Experiences}},
 url = {https://ecommons.luc.edu/cs_facpubs/144/},
 volume = {13},
 year = {2011}
}

@article{Laufer_CISE_Functional2_2009,
 abbr = {CiSE},
 author = {Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {5},
 pages = {68--75},
 shorttitle = {Scientific {Programming}},
 title = {Scientific {Programming}: {The} {Promises} of {Typed}, {Pure}, and {Lazy} {Functional} {Programming}: {Part} {II}},
 url = {https://ecommons.luc.edu/cs_facpubs/25/},
 volume = {11},
 year = {2009}
}

@article{Laufer_CISE_Hike3_2007,
 abbr = {CiSE},
 abstract = {By incorporating automated component, integration, and acceptance testing into the various tiers of a lightweight lava 2 Enterprise Edition (J2EE) Web application architecture, developers can shorten the development cycle and increase the quality of their work},
 author = {Läufer, Konstantin and Thiruvathukal, George K. and González, Benjamin},
 author+an = {1=myself;3=graduate},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {1},
 title = {A hike through a post-{EJB} {J2EE} web application architecture, part {III}},
 url = {https://ecommons.luc.edu/cs_facpubs/263/},
 volume = {9},
 year = {2007}
}

@article{Laufer_CISE_Slug_2007,
 abbr = {CiSE},
 author = {Läufer, Konstantin and Thiruvathukal, George K. and Nishimura, Ryohei and Martínez-Eiroa, Carlos Ramírez},
 author+an = {1=myself;3=undergrad;4=graduate},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {2},
 pages = {62--68},
 title = {Putting a {Slug} to {Work}},
 url = {https://ecommons.luc.edu/cs_facpubs/23/},
 volume = {11},
 year = {2009}
}

@article{Laufer_IEEEComputer_2024,
 abbr = {Computer},
 abstract = {Our hands-on course introduces model checking using Temporal Logic of Actions through practical examples like the control logic for a microwave oven. Due to highly positive initial feedback from our own students, we plan to broaden our reach by partnering with other institutions.},
 author = {Läufer, Konstantin and Mertin, Gunda and Thiruvathukal, George K.},
 author+an = {1=myself;2=graduate},
 bibtex_show = {1},
 doi = {10.1109/MC.2024.3462188},
 journal = {Computer},
 month = {December},
 number = {12},
 selected = {true},
 title = {Engaging more students in formal methods education: a practical approach using temporal logic of actions},
 volume = {57},
 year = {2024}
}

@article{Thiruvathukal_CISE_Plone_2004,
 abbr = {CiSE},
 author = {Thiruvathukal, George K. and Läufer, Konstantin},
 author+an = {2=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {4},
 pages = {88--95},
 title = {Plone and content management},
 url = {https://ecommons.luc.edu/cs_facpubs/30/},
 volume = {6},
 year = {2004}
}

@article{Thiruvathukal_CISE_Summer_2008,
 abbr = {CiSE},
 author = {Thiruvathukal, George K. and Läufer, Konstantin},
 author+an = {2=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {6},
 pages = {76--81},
 title = {What {I} did on my summer vacation},
 url = {https://ieeexplore.ieee.org/document/4653209},
 volume = {10},
 year = {2008}
}

@article{Thiruvathukal_CISE_Testing_2006,
 abbr = {CiSE},
 author = {Thiruvathukal, George K. and Läufer, Konstantin and González, Benjamin},
 author+an = {2=myself;3=graduate},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {6},
 pages = {76--87},
 title = {Unit {Testing} {Considered} {Useful}},
 url = {https://ecommons.luc.edu/cs_facpubs/33/},
 volume = {8},
 year = {2006}
}

@article{Thiruvathukal_CISE_Virtualization_2010,
 abbr = {CiSE},
 author = {Thiruvathukal, George K. and Läufer, Konstantin and Hinsen, Konrad and Kaylor, Joseph P.},
 author+an = {2=myself;4=graduate},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 number = {4},
 pages = {52--61},
 title = {Virtualization for {Computational} {Scientists}},
 url = {https://ecommons.luc.edu/cs_facpubs/16/},
 volume = {12},
 year = {2010}
}

@article{Thiruvathukal_CISE_XML_2004,
 abbr = {CiSE},
 author = {Thiruvathukal, George K. and Läufer, Konstantin},
 author+an = {2=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1521-9615},
 journal = {Computing in Science and Engineering},
 pages = {86--92},
 title = {Natural {XML} for {Data} {Binding}, {Processing}, and {Persistence}},
 url = {https://ecommons.luc.edu/cs_facpubs/9/},
 volume = {6},
 year = {2004}
}
@misc{chung2003,
 author = {Chung, Christopher and Rockwell, Daisy and Bai, Tao and Läufer, K and Thiruvathukal, George K},
 author+an = {3=graduate;4=myself},
 bibtex_show = {1},
 howpublished = {Presented at the 2003 Midwest Software Engineering Conference, Chicago, Illinois},
 title = {Using handheld and wireless technology for classroom and community-based {South} {Asian} language pedagogy},
 url = {https://ecommons.luc.edu/cs_facpubs/2/},
 year = {2003}
}

@inproceedings{DeLandaluce_DriveAware_2022,
 abbr = {LUC},
 abstract = {As we’re driving around Chicago going about our weekly business, we can’t help but notice telltale signs of social problems in our neighborhoods, such as homelessness, drug use, street prostitution, and suspected human trafficking. Some neighborhoods are frozen in time, often with little evidence of new development and access to opportunities that are clustered around the north side of Chicago. It may not be comfortable for us to intervene directly or scientifically sound to draw conclusions based on our isolated observations. Nevertheless, we may have an opportunity to contribute as citizen scientists by recording our observations and sharing them with better-equipped stakeholders. The interdisciplinary DriveAware project aims to use mobile computing technology to make it safe and convenient for citizen scientists in their vehicles or on foot to augment existing observations, e.g. Google Street View, such as geotagged annotated images, to various stakeholders, such as social scientists, law enforcement, social service providers, and ordinary fellow citizens. The collected data can be used in various ways, including offline data analysis and real-time maps and dashboards, as well as concrete action, such as social scientists going on location to interview the affected individuals, law enforcement investigating and prosecuting potential incidents, and social service providers intervening directly, e.g., by picking up homeless persons during a cold spell and taking them to shelters. In addition to the interdisciplinary stakeholders’ existing research questions, this project gives rise to various computer science research questions, such as system requirements and architecture, system implementation, integration with existing databases in particular fields, user experience studies to determine the likelihood of reporting observations through in-car voice-based and/or reduced distraction touch interfaces (Android Auto/Apple CarPlay) versus conventional mobile apps. To support our research questions, we have developed a proof of concept of a mobile application for reporting observations in various pertinent categories, which get stored in a cloud-hosted Firebase (NoSQL) instance and can be accessed through a Python Jupyter notebook and analyzed/visualized in multidimensional ways. Future plans include integration with commercial automotive frameworks, such as Android Auto (and eventually Apple CarPlay) and automatic image collection from dashcams connected to the mobile phone via Bluetooth. The diagram below illustrates the high-level system architecture.},
 author = {de Landaluce, Álvaro and Sinche Chele, Federico and Stalans, Loretta and Thiruvathukal, George K. and Läufer, Konstantin},
 author+an = {1=graduate;5=myself},
 bibtex_show = {1},
 booktitle = {Computer science research symposium},
 title = {{DriveAware}: {Generating} actionable data through vehicle-based citizen science (poster)},
 url = {https://ecommons.luc.edu/csrs/ay2021-2022/techreport/1/},
 year = {2022}
}

@misc{Dias_GCASR_2013,
 abbr = {GCASR},
 author = {Dias, Thomas Delgado and Yan, Xian and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=undergrad;2=graduate;3=myself},
 bibtex_show = {1},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 month = {May},
 note = {Publication title: Proc. 4th greater chicago area system research workshop (GCASR), chicago, illinois},
 shorttitle = {{GCASR} 13},
 title = {Building capable, energy-efficient, flexible visualization and sensing clusters from commodity tablets (poster)},
 url = {https://ecommons.luc.edu/cs_facpubs/66/},
 year = {2013}
}

@inproceedings{Gathright_GCASR_2015,
 author = {Gathright, Brian and Läufer, Konstantin and Parsa, Aziz and Thiruvathukal, George K.},
 author+an = {1=undergrad;2=myself;3=graduate},
 bibtex_show = {1},
 booktitle = {Proc. 4th greater chicago area system research workshop ({GCASR}), chicago, illinois},
 month = {May},
 title = {Middleware for collaborative distributed/mobile applications: {XMPP} or reactive {HTTP}? ({Poster})},
 year = {2015}
}

@misc{Hasler_LLMENERGY_2024,
 author = {Hasler, Ryan and Läufer, Konstantin and Thiruvathukal, George K. and Peng, Huiyun and Robinson, Kyle and Davis, Kirsten and Lu, Yung-Hsiang and Davis, James C.},
 author+an = {1=graduate;2=myself},
 bibtex_show = {1},
 note = {arXiv: 2411.08912 [cs.CY]},
 title = {Can large-language models help us better understand and teach the development of energy-efficient software?},
 url = {https://arxiv.org/abs/2411.08912},
 year = {2024}
}

@techreport{laufer1984,
 author = {Dierenbach, Ralf and Erbs, Heinz-Erich and Läufer, Konstantin},
 author+an = {3=myself},
 bibtex_show = {1},
 institution = {Universität Konstanz},
 title = {{MailBox} user manual and administration guide},
 year = {1984}
}

@techreport{laufer1986,
 address = {Technologiezentrum Konstanz, Germany},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 institution = {Cobra GmbH},
 title = {Cobra litsy user manual},
 year = {1986}
}

@techreport{laufer1987,
 address = {Technologiezentrum Konstanz, Germany},
 author = {Läufer, Konstantin and Mehl, Wolfgang},
 author+an = {1=myself},
 bibtex_show = {1},
 institution = {Cobra GmbH},
 title = {Cobra address user manual},
 year = {1987}
}

@inproceedings{Laufer_EduPar_2012,
 abbr = {TCPP},
 author = {Läufer, Konstantin and Sekharan, Chandra and Thiruvathukal, George K. and Kaylor, Joseph P.},
 author+an = {1=myself;4=graduate},
 bibtex_show = {1},
 booktitle = {2nd {NSF}/{IEEE}-{CS} {TCPP} workshop on parallel and distributed computing education ({EduPar}), shanghai, china},
 month = {May},
 title = {Early adopter report: {PDC} modules for every level: a comprehensive model for incorporating {PDC} topics into the existing undergraduate curriculum (poster)},
 url = {https://tcpp.cs.gsu.edu/curriculum/?q=advanced-technical-program},
 year = {2012}
}

@inproceedings{Laufer_escience_2023,
 abbr = {eScience},
 abstract = {One of the key goals in high-performance and distributed software engineering is to leverage the specific capabilities of the target hardware to the extent possible. Today’s systems are typically heterogeneous, where one or more architectures may be present within a single system, such as conventional CPU cores combined with accelerators such as GPUs and FPGAs. Although parallel computing itself has reached a high level of maturity, as we move toward exascale and beyond computing, challenges similar to those that plagued the earliest days of parallel and distributed computing are beginning to resurface: Leveraging heterogeneity while balancing performance, software portability, and developer productivity (P3). This tutorial provides hands-on experience in developing high-performance and embedded software for heterogeneous architectures using Intel’s oneAPI reference implementation of the Khronos SYCL standard in conjunction with state-of-the-art software engineering methods. By raising the abstraction level via its unified application programming interface (API), oneAPI makes it easier to develop portable high-performance software for systems with embedded hardware accelerators, such as GPUs and FPGAs.},
 author = {Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {{IEEE} {eScience} conference, limmasol, cyprus},
 month = {October},
 title = {{UnoAPI}: {Modern} techniques for engineering high-performance software (tutorial)},
 url = {https://www.escience-conference.org/2023/tutorials/unoapi},
 year = {2023}
}

@inproceedings{Laufer_ISAS_1995,
 address = {Baden-Baden, Germany},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 booktitle = {Proc. {Symp}. {Information} systems analysis and synthesis ({ISAS})},
 month = {August},
 title = {Interactive web applications based on finite state machines (invited talk)},
 year = {1995}
}

@misc{Laufer_MCC_1996,
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 howpublished = {Presented at the Tenth Annual Midwest Computer Conference, Chicago},
 month = {March},
 title = {An open environment for {Common} {Gateway} {Interface} programming},
 year = {1996}
}

@misc{Laufer_MCC_1997,
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 howpublished = {Presented at the Eleventh Annual Midwest Computer Conference, Springfield, Illinois},
 month = {March},
 title = {Using {Java} in the undergraduate computer science curriculum},
 year = {1997}
}

@misc{Laufer_TLANotebook_2025,
 author = {Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=myself},
 bibtex_show = {1},
 doi = {10.6084/m9.figshare.28376276.v1},
 month = {February},
 title = {{TLA}+ for all: {Model} checking in a python notebook},
 url = {https://figshare.com/articles/preprint/TLA_for_All_Model_Checking_in_a_Python_Notebook/28376276},
 year = {2025}
}

@inproceedings{Lewis_ScalaDays_2017,
 author = {Lewis, Mark and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {2=myself},
 bibtex_show = {1},
 booktitle = {Scala days},
 month = {May},
 title = {Experiences with scala across the college-level curriculum (invited talk)},
 year = {2017}
}

@inproceedings{Lewis_SIGCSE_2013,
 abbr = {SIGCSE},
 abstract = {Various hybrid-paradigm languages, designed to balance compile-time error detection, conciseness, and performance, have emerged. Scala, e.g., is interoperable with Java and has become an early leader in adoption, especially in the start-up and open-source spaces. Workshop participants experience Scala's value as a teaching language in the CS curriculum through four lecture-lab modules: In CS1, the read-eval-print loop and simple, uniform syntax aid programming in the small. In CS2, higher-order methods allow concise, efficient manipulation of collections. Advanced topics include domain-specific languages, concurrency, web apps/services, and mobile apps. Laptop recommended with Scala installed.},
 address = {ACM, 2 Penn Plaza, Suite 701, New York, NY 10121-0701, USA},
 author = {Lewis, Mark and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {2=myself},
 bibtex_show = {1},
 booktitle = {44th {ACM} technical symposium / {Computer} science education ({SIGCSE} '13)},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 isbn = {978-1-4503-1868-6},
 title = {Using {Scala} strategically across the undergraduate curriculum ({Workshop})},
 url = {https://ecommons.luc.edu/cs_facpubs/69/},
 year = {2013}
}

@inproceedings{Lewis_SIGCSE_2014,
 abbr = {SIGCSE},
 abstract = {Scala is one of a new breed of hybrid languages with both object-oriented and functional aspects. It happens to be the most successful of these languages coming in at \#12 on the Red Monk language ranking and leading all languages in their 2nd tier. This workshop will introduce participants to the Scala programming language, how it can be used effectively in introductory CS courses, and the parallel tools that are available for it. We begin with simple examples in the REPL and scripting environment, then look at doing larger, object-oriented projects. We finish off with an exploration of composable futures and the Akka actor library. Participants are strongly recommended to bring a laptop.},
 address = {ACM, 2 Penn Plaza, Suite 701, New York, NY 10121-0701, USA},
 author = {Lewis, Mark and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {2=myself},
 bibtex_show = {1},
 booktitle = {45th {ACM} technical symposium / {Computer} science education ({SIGCSE} '14)},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 isbn = {978-1-4503-2605-6},
 title = {Scala for introductory {CS} and parallelism (workshop)},
 url = {https://scalaworkshop.cs.luc.edu/html/},
 year = {2014}
}

@inproceedings{Miller_GRS_2020,
 abbr = {LUC},
 abstract = {Trust in open-source software is a cornerstone of scientific progress and a foundation of high-quality public services. Just as standards are integral when judging the efficacy of a novel pharmaceutical compound or determining the spread of a new disease, the software used to make those determinations should be useful, error-free, reliable, performant, and secure. A small bug in an application, library, or framework can lead to economic loss and even loss of life. We rely on software developers to be dynamic and responsive to user review and bug-reporting. Our team developed an open-source modular pipeline to perform empirical investigations of software quality. A key innovation of our approach is to look at projects “from a distance” similar to methods used in climate, e.g. satellite images being used to observe environmental impacts in air quality/rain forests. Instead of looking at language-specific source code features, our pipeline uses a language-agnostic high-level approach to track software quality by focusing on the development process itself, which yields great insight into the processes programmers use to write and maintain their software. Our distributed modular approach to analytics allows the pipeline to be easily extended to support additional metrics in future work. We store extracted data in an embedded SQLite database, which means that analysis can proceed without complex server setup, let alone hosting the software on dedicated servers. Our analytical modules are designed for efficiency, and future runs of our software only collect missing data, supporting the incremental analysis of known, important open-source projects.},
 author = {Miller, Allan and Thiruvathukal, George K. and Läufer, Konstantin and Amobi, Emmanuel and Higgins, Sean and Maliakal, Linette and Meister, Emily and Putter, Jean-Luc and Rose, Alex and Synovic, Nicholas and Von Hatten, Sophie and Warkentin, Jonathan and Zugschwert, Martin},
 author+an = {1=graduate;3=myself;4=undergrad;5=undergrad;6=undergrad;7=undergrad;8=undergrad;9=undergrad;10=undergrad;11=undergrad;12=undergrad;13=undergrad},
 bibtex_show = {1},
 booktitle = {Graduate research symposium},
 title = {Toward a containerized pipeline for longitudinal analysis of open-source software projects ({Poster})},
 url = {http://ecommons.luc.edu/grs/2020/posters/4},
 year = {2020}
}

@misc{Peng_LLMEnergy_2024,
 abstract = {Energy-efficient software helps improve mobile device experiences and reduce the carbon footprint of data centers. However, energy goals are often de-prioritized in order to meet other requirements. We take inspiration from recent work exploring the use of large language models (LLMs) for different software engineering activities. We propose a novel application of LLMs: as code optimizers for energy efficiency. We describe and evaluate a prototype, finding that over 6 small programs our system can improve energy efficiency in 3 of them, up to 2x better than compiler optimizations alone. From our experience, we identify some of the challenges of energy-efficient LLM code optimization and propose a research agenda.},
 arxiv = {2410.09241},
 author = {Peng, Huiyun and Gupte, Arjun and Eliopoulos, Nicholas John and Ho, Chien Chou and Mantri, Rishi and Deng, Leo and Jiang, Wenxin and Lu, Yung-Hsiang and Läufer, Konstantin and Thiruvathukal, George K. and Davis, James C.},
 author+an = {9=myself},
 bibtex_show = {1},
 note = {arXiv: 2410.09241 [cs.SE]},
 title = {Large language models for energy-efficient code: {Emerging} results and future directions},
 url = {https://arxiv.org/abs/2410.09241},
 year = {2024}
}

@book{SaleemSiddiqui_2021,
 author = {Siddiqui, Saleem},
 bibtex_show = {1},
 isbn = {978-1-0981-0647-8},
 publisher = {O'Reilly Media, Inc.},
 title = {Learning test-driven development},
 url = {https://learning.oreilly.com/library/view/learning-test-driven-development/9781098106461/foreword01.html},
 year = {2021}
}

@article{Sinche_OSTI_2023,
 abstract = {Moore's law states that the number of transistors that can be placed on an integrated circuit doubles every two years (Moore, 1975). This has led to a steady increase in the processing power of computers over time, and technology is now enhancing and advancing software and scientific applications, which has enabled computationally intensive methods such as machine learning, data science, modeling, and simulation. The advancement of computers and data-driven algorithms is profoundly impacting people's lives. It is changing the way we work, the way we learn, and the way we interact with the world around us. Here, this editorial will discuss how scientists can benefit from the latest technology advancements and related tools by incorporating them into the ecological risk assessment (ERA) to study ecosystems as a way to create refined assessments and accelerate the turnaround times.},
 author = {Chele, Federico Sinche and Jimenez‐Pazmino, Priscilla and Läufer, Konstantin},
 author+an = {3=myself},
 doi = {10.1002/ieam.4815},
 issn = {1551-3777},
 journal = {Integrated Environmental Assessment and Management},
 month = {August},
 note = {Place: United States},
 number = {5},
 title = {New technologies as decision aids for the advancement of ecological risk assessment},
 url = {https://www.osti.gov/biblio/2000330},
 volume = {19},
 year = {2023}
}

@inproceedings{Stasiuk_GCASR_2013,
 abbr = {GCASR},
 author = {Stasiuk, Paul and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=undergrad;2=myself},
 bibtex_show = {1},
 booktitle = {Proc. 2nd greater chicago area system research workshop ({GCASR}), chicago, illinois},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 month = {May},
 shorttitle = {Gcasr 13},
 title = {Network technologies used to aggregate environmental data (poster)},
 url = {https://ecommons.luc.edu/cs_facpubs/65/},
 year = {2013}
}

@inproceedings{Synovic_URES_2021,
 abbr = {LUC},
 abstract = {The Metrics Pipeline (Codename) focuses on metrics indicative of team progress and project health instead of privileging individual metrics, e.g. number of commits, etc. The Metrics Dashboard allows the user to submit the URL of a hosted repository for batch analysis, whose results are then cached. Upon completion, the user can interactively study various metrics over time (at varying granularity), numerically, and visually. The initial version of the system is up and running as a public cloud service (SaaS) and supports project size (KLOC), defect density, defect spoilage, and productivity. While our system is by no means the first to support software metrics, we believe it may be one of the first community-focused extensible resources that can be used by any hosted project.},
 author = {Synovic, Nicholas and Amobi, Emmanuel and Greve, Erik and Von Hatten, Sophie and Pinderski, Austin and Rodriguez, Stephanie and Zugschwert, Martin and Davis, Jamie C. and Hayward, Nicholas and Läufer, Konstantin and Thiruvathukal, George K.},
 author+an = {1=undergrad;2=undergrad;3=undergrad;4=graduate;5=undergrad;6=undergrad;7=undergrad;10=myself},
 bibtex_show = {1},
 booktitle = {Undergraduate research and engagement symposium},
 title = {Metrics pipeline (codename): {An} analytics and visualization pipeline for software quality metrics (poster)},
 url = {https://ecommons.luc.edu/ures/2021/2021/91/},
 year = {2021}
}
@patent{ball2003method1,
 abbr = {Patent},
 author = {Ball, Thomas J and Danielsen, Peter John and Jagadeesan, Lalita Jategaonkar and Läufer, Konstantin and Mataga, Peter Andrew and Rehor, Kenneth G},
 author+an = {4=myself},
 bibtex_show = {1},
 month = {March},
 title = {Method and apparatus for providing interactive services with multiple interfaces},
 url = {https://patents.google.com/patent/US6529863B1},
 year = {2003}
}

@patent{ball2003method2,
 abbr = {Patent},
 author = {Ball, Thomas J and Danielsen, Peter John and Jagadeesan, Lalita Jategaonkar and Läufer, Konstantin and Mataga, Peter Andrew and Rehor, Kenneth G},
 author+an = {4=myself},
 bibtex_show = {1},
 month = {March},
 title = {Method and apparatus for providing interactive services with multiple interfaces},
 url = {https://patents.google.com/patent/US6609089B1},
 year = {2003}
}
@techreport{BaumgartnerHalf2002,
 author = {Baumgartner, Gerald and Jansche, Martin and Läufer, Konstantin},
 author+an = {3=myself},
 bibtex_show = {1},
 institution = {Purdue University},
 title = {Half \& half: {Multiple} dispatch and retroactive abstraction for java},
 year = {2002}
}

@techreport{BaumgartnerLauferRusso_Interactions_1996,
 abstract = {Design patterns are distilled from many real systems to catalog common programming practice. However, some object-oriented design patterns are distorted or overly complicated because of the lack of supporting programming language constructs or mechanisms. For this paper, we have analyzed several published design patterns looking for idiomatic ways of working around constraints of the implementation language. From this analysis, we lay a groundwork of general-purpose language constructs and mechanisms that, if provided by a statically typed, object-oriented language, would better support the implementation of design patterns and, transitively, benefit the construction of many real systems. In particular, our catalog of language constructs includes subtyping separate from inheritance, lexically scoped closure objects independent of classes, and multimethod dispatch. The proposed constructs and mechanisms are not radically new, but rather are adopted from a variety of languages and programming language research and combined in a new, orthogonal manner. We argue that by describing design patterns in terms of the proposed constructs and mechanisms, pattern descriptions become simpler and, therefore, accessible to a larger number of language communities. Constructs and mechanisms lacking in a particular language can be implemented using paradigmatic idioms.},
 arxiv = {1905.13674},
 author = {Baumgartner, Gerald and Läufer, Konstantin and Russo, Vincent F.},
 author+an = {2=myself},
 bibtex_show = {1},
 institution = {Purdue University},
 month = {February},
 note = {arXiv: 1905.13674},
 number = {CSD-TR-96-020},
 selected = {true},
 title = {On the interaction of object-oriented design patterns and programming languages},
 url = {http://arxiv.org/abs/1905.13674},
 year = {1996}
}

@article{DBLP:journals/corr/abs-1804-02053,
 abstract = {There is an emerging consensus in the scientific software community that progress in scientific research is dependent on the "quality and accessibility of software at all levels" (this http URL). This progress depends on embracing the best traditional—and emergent—practices in software engineering, especially agile practices that intersect with the more formal tradition of software engineering. As a first step in our larger exploratory project to study in-process quality metrics for software development projects in Computational Science and Engineering (CSE), we have developed the Metrics Dashboard, a platform for producing and observing metrics by mining open-source software repositories on GitHub. Unlike GitHub and similar systems that provide individual performance metrics (e.g. commits), the Metrics Dashboard focuses on metrics indicative of team progress and project health. The Metrics Dashboard allows the user to submit the URL of a hosted repository for batch analysis, whose results are then cached. Upon completion, the user can interactively study various metrics over time (at varying granularity), numerically and visually. The initial version of the system is up and running as a public cloud service (SaaS) and supports project size (KLOC), defect density, defect spoilage, and productivity. While our system is by no means the first to support software metrics, we believe it may be one of the first community-focused extensible resources that can be used by any hosted project.},
 arxiv = {1804.02053},
 author = {Thiruvathukal, George K. and {Shilpika} and Hayward, Nicholas J. and Läufer, Konstantin},
 author+an = {4=myself;2=graduate},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 bibtex_show = {1},
 journal = {CoRR},
 note = {arXiv: 1804.02053},
 timestamp = {Mon, 13 Aug 2018 16:47:28 +0200},
 title = {Metrics dashboard: {A} hosted platform for software quality metrics},
 url = {http://arxiv.org/abs/1804.02053},
 volume = {abs/1804.02053},
 year = {2018}
}

@techreport{Laufer_AOSD_2003,
 author = {Läufer, Konstantin and Thiruvathukal, George K. and Elrad, Tzilla},
 author+an = {1=myself},
 bibtex_show = {1},
 institution = {Loyola University Chicago},
 month = {September},
 title = {Enhancing the {CS} curriculum with with aspect-oriented software development ({AOSD}) and early experience},
 url = {https://ecommons.luc.edu/cs_facpubs/4/},
 year = {2003}
}

@techreport{Laufer_Transformational_1991,
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 institution = {Department of Computer Science, New York University},
 month = {April},
 number = {NYU-CS-TR 555},
 title = {Three approaches to transformational programming – a comparative survey},
 year = {1991}
}
@phdthesis{Laufer_Thesis_1992,
 abstract = {Many statically-typed programming languages provide an abstract data type construct, such as the package in Ada, the cluster in CLU, and the module in Modula2. However, in most of these languages, instances of abstract data types are not first-class values. Thus they cannot be assigned to a variable, passed as a function parameter, or returned as a function result. The higher-order functional language ML has a strong and static type system with parametric polymorphism. In addition, ML provides type reconstruction and consequently does not require type declarations for identifiers. Although the ML module system supports abstract data types, their instances cannot be used as first-class values for type-theoretic reasons. In this dissertation, we describe a family of extensions of ML. While retaining ML’s static type discipline, type reconstruction, and most of its syntax, we add significant expressive power to the language by incorporating first-class abstract types as an extension of ML’s free algebraic datatypes. In particular, we are now able to express multiple implementations of a given abstract type; heterogeneous aggregates of different implementations of the same abstract type; and dynamic dispatching of operations with respect to the implementation type. Following Mitchell and Plotkin, we formalize abstract types in terms of existentially quantified types. We prove that our type system is semantically sound with respect to a standard denotational semantics. We then present an extension of Haskell, a non-strict functional language that uses type classes to capture systematic overloading. This language results from incorporating existentially quantified types into Haskell and gives us first-class abstract types with type classes as their interfaces. We can now express heterogeneous structures over type classes. The language is statically typed and offers comparable flexibility to object-oriented languages. Its semantics is defined through a type-preserving translation to a modified version of our ML extension. We have implemented a prototype of an interpreter for our language, including the type reconstruction algorithm, in Standard ML.},
 author = {Läufer, Konstantin},
 author+an = {1=myself},
 bibtex_show = {1},
 key = {lau92},
 month = {July},
 school = {New York University},
 title = {Polymorphic type inference and abstract data types},
 type = {phd},
 year = {1992}
}
